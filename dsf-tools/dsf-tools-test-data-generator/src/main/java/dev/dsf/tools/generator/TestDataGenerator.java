package dev.dsf.tools.generator;

import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.List;
import java.util.Properties;

import org.hl7.fhir.r4.model.Bundle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.parser.IParser;
import de.hsheilbronn.mi.utils.crypto.io.KeyStoreWriter;
import de.hsheilbronn.mi.utils.crypto.io.PemWriter;
import de.hsheilbronn.mi.utils.crypto.keystore.KeyStoreCreator;

public final class TestDataGenerator
{
	private static final Logger logger = LoggerFactory.getLogger(TestDataGenerator.class);

	private static final char[] PRIVATE_KEY_PASSWORD = "password".toCharArray();

	private final CertificateGenerator certificateGenerator;
	private final BundleGenerator bundleGenerator;
	private final ConfigGenerator configGenerator;
	private final EnvGenerator envGenerator;

	private Path baseFolder;

	private TestDataGenerator(Path baseFolder)
	{
		this.baseFolder = baseFolder;

		certificateGenerator = new CertificateGenerator(
				baseFolder.resolve("dsf-tools/dsf-tools-test-data-generator/cert"), PRIVATE_KEY_PASSWORD);

		bundleGenerator = new BundleGenerator(certificateGenerator);
		configGenerator = new ConfigGenerator(certificateGenerator);
		envGenerator = new EnvGenerator(certificateGenerator);
	}

	private void writeBundle(Bundle bundle, String bundleFile)
	{
		try (OutputStream out = Files.newOutputStream(baseFolder.resolve(bundleFile));
				OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8))
		{
			IParser parser = FhirContext.forR4().newXmlParser();
			parser.setStripVersionsFromReferences(false);
			parser.setOverrideResourceIdWithBundleEntryFullUrl(false);
			parser.setPrettyPrint(true);

			logger.info("Writing bundle to {}", bundleFile);
			parser.encodeResourceToWriter(bundle, writer);
		}
		catch (IOException e)
		{
			logger.error("Unable to write bundle to {}", bundleFile, e);
			throw new RuntimeException(e);
		}
	}

	private void writeProperties(Properties properties, String file)
	{
		try (OutputStream out = Files.newOutputStream(baseFolder.resolve(file));
				OutputStreamWriter writer = new OutputStreamWriter(out, StandardCharsets.UTF_8))
		{
			logger.info("Writing properties to {}", file);
			properties.store(writer, "Generated by test-data-generator");
		}
		catch (IOException e)
		{
			logger.error("Unable to write properties to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writeCertificates(Collection<? extends X509Certificate> certificates, String file)
	{
		try
		{
			logger.info("Writing certificates to {}", file);
			PemWriter.writeCertificates(certificates, true, baseFolder.resolve(file));
		}
		catch (IOException e)
		{
			logger.error("Unable to write certificates to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writeCertificate(X509Certificate certificate, String file)
	{
		try
		{
			logger.info("Writing certificate to {}", file);
			PemWriter.writeCertificate(certificate, baseFolder.resolve(file));
		}
		catch (IOException e)
		{
			logger.error("Unable to write certificate to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writePrivateKeyEncrypted(PrivateKey privateKey, String file)
	{
		try
		{
			logger.info("Writing encrypted private-key to {}", file);
			PemWriter.writePrivateKey(privateKey).asPkcs8().encryptedAes128(PRIVATE_KEY_PASSWORD)
					.toFile(baseFolder.resolve(file));
		}
		catch (IOException e)
		{
			logger.error("Unable to write encrypted private-key to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writePrivateKeyPlain(PrivateKey privateKey, String file)
	{
		try
		{
			logger.info("Writing plain private-key to {}", file);
			PemWriter.writePrivateKey(privateKey).asPkcs8().notEncrypted().toFile(baseFolder.resolve(file));
		}
		catch (IOException e)
		{
			logger.error("Unable to write plain private-key to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writeEnv(String env, String file)
	{
		try (OutputStream out = Files.newOutputStream(baseFolder.resolve(file));
				Writer writer = new OutputStreamWriter(out, StandardCharsets.UTF_8))
		{
			logger.info("Writing env to {}", file);
			writer.write(env);
		}
		catch (IOException e)
		{
			logger.error("Unable to write env to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writeKeyStore(KeyStore keyStore, String file)
	{
		try
		{
			logger.info("Writing keystore with password '{}' to {}", String.valueOf(PRIVATE_KEY_PASSWORD), file);
			KeyStoreWriter.write(keyStore, PRIVATE_KEY_PASSWORD, baseFolder.resolve(file));
		}
		catch (IOException e)
		{
			logger.error("Unable to write keystore to {}", file, e);
			throw new RuntimeException(e);
		}
	}

	private void writeCaFiles(String folder)
	{
		writeCertificate(certificateGenerator.getIssuingCaCertificate(), folder + "/issuing_ca.crt");
		writeCertificate(certificateGenerator.getRootCaCertificate(), folder + "/root_ca.crt");
		writeCertificates(
				List.of(certificateGenerator.getIssuingCaCertificate(), certificateGenerator.getRootCaCertificate()),
				folder + "/ca_chain.crt");
	}

	private void writeCertificateAndEncryptedKey(String folder, String commonName, String filePrefix)
	{
		certificateGenerator.getCertificateAndPrivateKey(commonName).ifPresent(cK ->
		{
			writeCertificate(cK.certificate(), folder + "/" + filePrefix + ".crt");
			writePrivateKeyEncrypted(cK.privateKey(), folder + "/" + filePrefix + ".key");
		});
	}

	private void copyBpeJavaTestFiles()
	{
		final String folder = "dsf-bpe/dsf-bpe-server-jetty";

		writeProperties(configGenerator.getJavaTestBpeConfigProperties(), folder + "/conf/config.properties");
		writeCertificateAndEncryptedKey(folder + "/target", CertificateGenerator.SUBJECT_CN_BPE, "bpe");
		writeCaFiles(folder + "/target");
	}

	private void copyFhirJavaTestFiles()
	{
		final String folder = "dsf-fhir/dsf-fhir-server-jetty";

		writeBundle(bundleGenerator.getTestBundle(), folder + "/conf/bundle.xml");
		writeProperties(configGenerator.getJavaTestFhirConfigProperties(), folder + "/conf/config.properties");
		writeCertificateAndEncryptedKey(folder + "/target", CertificateGenerator.SUBJECT_CN_BPE, "bpe");
		writeCertificateAndEncryptedKey(folder + "/target", CertificateGenerator.SUBJECT_CN_FHIR, "fhir");
		writeCaFiles(folder + "/target");
	}

	private void copyDockerDevSetupBpeFiles()
	{
		final String folder = "dsf-docker-test-setup/bpe";

		certificateGenerator.getCertificateAndPrivateKey(CertificateGenerator.SUBJECT_CN_BPE).ifPresent(cK ->
		{
			writeCertificate(cK.certificate(), folder + "/secrets/bpe.crt");
			writePrivateKeyEncrypted(cK.privateKey(), folder + "/secrets/bpe.key");
			writePrivateKeyPlain(cK.privateKey(), folder + "/secrets/bpe.key.plain");
		});

		writeCaFiles(folder + "/secrets");
		writeEnv(envGenerator.generateDockerDevSetupBpeEnvFile(), folder + "/.env");
	}

	private void copyDockerDevSetupFhirFiles()
	{
		final String folder = "dsf-docker-test-setup/fhir";

		writeCertificateAndEncryptedKey(folder + "/secrets", CertificateGenerator.SUBJECT_CN_BPE, "bpe");

		certificateGenerator.getCertificateAndPrivateKey(CertificateGenerator.SUBJECT_CN_FHIR).ifPresent(cK ->
		{
			writeCertificate(cK.certificate(), folder + "/secrets/fhir.crt");
			writePrivateKeyPlain(cK.privateKey(), folder + "/secrets/fhir.key.plain");
		});

		writeCaFiles(folder + "/secrets");
		writeEnv(envGenerator.generateDockerDevSetupFhirEnvFile(), folder + "/.env");
	}

	private void copyDockerDevSetup3DicTtpFiles()
	{
		final String folder = "dsf-docker-test-setup-3dic-ttp";

		certificateGenerator.getCertificateAndPrivateKey(CertificateGenerator.SUBJECT_CN_LOCALHOST).ifPresent(cK ->
		{
			writeCertificates(List.of(cK.certificate(), certificateGenerator.getIssuingCaCertificate()),
					folder + "/secrets/localhost.crt");
			writePrivateKeyPlain(cK.privateKey(), folder + "/secrets/localhost.key.plain");
		});

		certificateGenerator.getCertificateAndPrivateKey(CertificateGenerator.SUBJECT_CN_KEYCLOAK).ifPresent(cK ->
		{
			writeCertificates(List.of(cK.certificate(), certificateGenerator.getIssuingCaCertificate()),
					folder + "/secrets/keycloak.crt");
			writePrivateKeyPlain(cK.privateKey(), folder + "/secrets/keycloak.key.plain");
		});

		writeCertificateAndEncryptedKey(folder + "/secrets", CertificateGenerator.SUBJECT_CN_DIC_1, "dic1");
		writeCertificateAndEncryptedKey(folder + "/secrets", CertificateGenerator.SUBJECT_CN_DIC_2, "dic2");
		writeCertificateAndEncryptedKey(folder + "/secrets", CertificateGenerator.SUBJECT_CN_DIC_3, "dic3");
		writeCertificateAndEncryptedKey(folder + "/secrets", CertificateGenerator.SUBJECT_CN_TTP, "ttp");

		KeyStore trustStore = KeyStoreCreator.jksForTrustedCertificates(certificateGenerator.getIssuingCaCertificate());
		writeKeyStore(trustStore, folder + "/secrets/keycloak_trust_store.jks");

		writeCaFiles(folder + "/secrets");
		writeEnv(envGenerator.generateDockerDevSetup3DicTtpEnvFile(), folder + "/.env");
	}

	private void createWebbrowserTestUserKeyStore()
	{
		certificateGenerator.getCertificateAndPrivateKey("Webbrowser Test User").ifPresent(cK ->
		{
			KeyStore keyStore = KeyStoreCreator.pkcs12ForPrivateKeyAndCertificateChain(cK.privateKey(),
					PRIVATE_KEY_PASSWORD, cK.certificate(), certificateGenerator.getIssuingCaCertificate(),
					certificateGenerator.getRootCaCertificate());

			writeKeyStore(keyStore, "dsf-tools/dsf-tools-test-data-generator/cert/Webbrowser_Test_User.p12");
		});
	}

	public static void main(String[] args) throws UnknownHostException
	{
		if (args.length != 1)
		{
			System.err.println("Command arg base folder missing");
			System.exit(1);
		}

		logger.info("Base folder: {}", Paths.get(args[0]).toAbsolutePath().normalize().toString());

		TestDataGenerator testDataGenerator = new TestDataGenerator(Paths.get(args[0]).normalize());

		testDataGenerator.copyBpeJavaTestFiles();
		testDataGenerator.copyDockerDevSetupBpeFiles();
		testDataGenerator.copyDockerDevSetupFhirFiles();
		testDataGenerator.copyDockerDevSetup3DicTtpFiles();
		testDataGenerator.copyFhirJavaTestFiles();

		testDataGenerator.createWebbrowserTestUserKeyStore();
	}
}
