<VirtualHost *:443>

ServerName ${HTTPS_SERVER_NAME_PORT}
ErrorLog /proc/self/fd/2

SSLEngine on

# server config
# SSLCertificateFile: server certificate private key
# SSLCertificateKeyFile: server certificate (and ca chain except root)
# SSLCertificateChainFile: optional CA chain for the server certificate (should exclude the root CA), can be used if CA chain is not included in SSLCertificateKeyFile, default value see Dockerfile

SSLCertificateFile "${SSL_CERTIFICATE_FILE}"
SSLCertificateKeyFile "${SSL_CERTIFICATE_KEY_FILE}"
<IfFile "${SSL_CERTIFICATE_CHAIN_FILE}">
	SSLCertificateChainFile "${SSL_CERTIFICATE_CHAIN_FILE}"
</IfFile>

# client config
# SSLCACertificateFile: file with trusted full CA chains for validating client certificates, default value see Dockerfile
# SSLCACertificatePath: path with trusted full CA chains for validating client certificates, default value see Dockerfile
# SSLCADNRequestFile: file with optional trusted client certificate issuing CAs, modifies the "Acceptable client certificate CA names" send to the client, uses all from SSLCACertificateFile if not set, default value see Dockerfile
# SSLCADNRequestPath: path with optional trusted client certificate issuing CAs, modifies the "Acceptable client certificate CA names" send to the client, uses all from SSLCACertificateFile if not set, default value see Dockerfile

# ssl_ca.conf file generated by start.sh
Include conf/extra/ssl_ca.conf

#<IfFile "${SSL_CA_CERTIFICATE_FILE}">
#	SSLCACertificateFile "${SSL_CA_CERTIFICATE_FILE}"
#</IfFile>
#<IfFile "${SSL_CA_DN_REQUEST_FILE}">
#	SSLCADNRequestFile "${SSL_CA_DN_REQUEST_FILE}"
#</IfFile>
#
#<IfFile !"${SSL_CA_CERTIFICATE_FILE}">
#	SSLCACertificatePath "${SSL_CA_CERTIFICATE_PATH}"
#</IfFile>
#<IfFile !"${SSL_CA_DN_REQUEST_FILE}">
#	SSLCADNRequestPath "${SSL_CA_DN_REQUEST_PATH}"
#</IfFile>

# SSLVerifyDepth n: max n signing CAs allowed between client certificate and root certificate

SSLVerifyDepth 3
SSLVerifyClient "${SSL_VERIFY_CLIENT}"

SSLOptions +ExportCertData
RequestHeader set X-ClientCert ""

Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains"

<Location "${SERVER_CONTEXT_PATH}">
	# certificate_require_expr.conf file generated by start.sh
	Include conf/extra/certificate_require_expr.conf
	
	RequestHeader set X-ClientCert %{SSL_CLIENT_CERT}s "expr=-n %{SSL_CLIENT_CERT}"
	RequestHeader set X-Forwarded-Proto %{REQUEST_SCHEME}s

	ProxyPass http://${APP_SERVER_IP}:8080/fhir/ timeout=${PROXY_PASS_TIMEOUT_HTTP} connectiontimeout=${PROXY_PASS_CONNECTION_TIMEOUT_HTTP}
	ProxyPassReverse http://${APP_SERVER_IP}:8080/fhir/
</Location>
<Location "${SERVER_CONTEXT_PATH}/">
	# certificate_require_expr.conf file generated by start.sh
	Include conf/extra/certificate_require_expr.conf

	RequestHeader set X-ClientCert %{SSL_CLIENT_CERT}s "expr=-n %{SSL_CLIENT_CERT}"
	RequestHeader set X-Forwarded-Proto %{REQUEST_SCHEME}s

	ProxyPass http://${APP_SERVER_IP}:8080/fhir/ timeout=${PROXY_PASS_TIMEOUT_HTTP} connectiontimeout=${PROXY_PASS_CONNECTION_TIMEOUT_HTTP}
	ProxyPassReverse http://${APP_SERVER_IP}:8080/fhir/
</Location>
<Location "${SERVER_CONTEXT_PATH}/ws">
	# certificate_require_expr.conf file generated by start.sh
	Include conf/extra/certificate_require_expr.conf

	RequestHeader set X-ClientCert %{SSL_CLIENT_CERT}s "expr=-n %{SSL_CLIENT_CERT}"
	RequestHeader set X-Forwarded-Proto %{REQUEST_SCHEME}s

	ProxyPass ws://${APP_SERVER_IP}:8080/fhir/ws timeout=${PROXY_PASS_TIMEOUT_WS} connectiontimeout=${PROXY_PASS_CONNECTION_TIMEOUT_WS}
	ProxyPassReverse ws://${APP_SERVER_IP}:8080/fhir/ws
</Location>

CustomLog /proc/self/fd/1 "%h %t \"%r\" %>s %b %{SSL_PROTOCOL}x %{SSL_CIPHER}x %{user-agent}i %{SSL_CLIENT_S_DN}x"

</VirtualHost>